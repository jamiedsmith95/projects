󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: no active client
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: no active client
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: no active client
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: no active client
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path('
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 9
󰘫  |1: delta |2:     path(' |3:     path(' |4:  |5: {}

󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 9,
      line = 20
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/django_project/urls.py"
    }
  },
  version = 0
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 0,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  check_completion_visible = true,
  line_to_cursor = "    path(",
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 0 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 1, 15 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 1, 15 }
}

󰘫  |1: md lines trim |2: { "```python", "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)", "```" }

󰘫  |1: label: |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: 0 |4: 1 |5: 5 |6: {
  activeParameter = 0,
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  parameters = { {
      label = { 1, 15 }
    }, {
      label = { 17, 30 }
    }, {
      label = { 32, 61 }
    }, {
      label = { 63, 90 }
    }, {
      label = { 92, 122 }
    } }
}

󰘫  |1: win config |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature360",
  line_to_cursor = "    path(",
  max_height = 50,
  max_width = 200,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}

󰘫  |1: cleanup vt |2: 14
󰘫  |1: virtual text:  |2: 20 |3: 21 |4: { "           route: Unknown", "Comment" }

󰘫  |1: floating opt |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature360",
  focusable = true,
  line_to_cursor = "    path(",
  max_width = 200,
  noautocmd = true,
  offset_x = 1,
  offset_y = 2,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}
 |3: {}
 |4: 2 |5: { "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)" }

󰘫  |1: sig_cfg new bufnr, winnr  |2: 23 |3: 1008
󰘫  |1: extmark |2: 23 |3: 2 |4: 15 |5: 0 |6: MoreMsg
󰘫  |1: extmark |2: 23 |3: 1 |4: 15 |5: 0
󰘫  |1: extmark_id |2: 1
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path('b
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 9
󰘫  |1: delta |2: 'b |3:     path('b |4:     path(' |5: {}

󰘫  |1: mode:    |2: i
󰘫  |1: should not trigger
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path('bl
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 9
󰘫  |1: delta |2: bl |3:     path('bl |4:     path('b |5: {}

󰘫  |1: mode:    |2: i
󰘫  |1: should not trigger
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path('blo
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 9
󰘫  |1: delta |2: lo |3:     path('blo |4:     path('bl |5: {}

󰘫  |1: mode:    |2: i
󰘫  |1: should not trigger
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path('blog
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 9
󰘫  |1: delta |2: og |3:     path('blog |4:     path('blo |5: {}

󰘫  |1: mode:    |2: i
󰘫  |1: should not trigger
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path('blog/
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 9
󰘫  |1: delta |2: g/ |3:     path('blog/ |4:     path('blog |5: {}

󰘫  |1: mode:    |2: i
󰘫  |1: should not trigger
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path('blog/
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 9
󰘫  |1: delta |2:     path('blog/ |3:     path('blog/ |4:     path('blog/ |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: i
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 9,
      line = 20
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/django_project/urls.py"
    }
  },
  version = 9
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 0,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "    path(",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 0 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 1, 15 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 1, 15 }
}

󰘫  |1: md lines trim |2: { "```python", "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)", "```" }

󰘫  |1: label: |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: 0 |4: 1 |5: 5 |6: {
  activeParameter = 0,
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  parameters = { {
      label = { 1, 15 }
    }, {
      label = { 17, 30 }
    }, {
      label = { 32, 61 }
    }, {
      label = { 63, 90 }
    }, {
      label = { 92, 122 }
    } }
}

󰘫  |1: win config |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  close_events = { "CursorMoved", "CursorMovedI", "BufHidden", "InsertCharPre" },
  focus_id = "lsp_signature455",
  line_to_cursor = "    path(",
  max_height = 50,
  max_width = 200,
  stylize_markdown = true,
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}

󰘫  |1: cleanup vt |2: 14
󰘫  |1: bufnr, ns |2: 23 |3: 34
󰘫  |1: virtual text:  |2: 20 |3: 21 |4: { "                route: Unknown", "Comment" }

󰘫  |1: floating opt |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  close_events = { "CursorMoved", "CursorMovedI", "BufHidden", "InsertCharPre" },
  focus_id = "lsp_signature455",
  focusable = true,
  line_to_cursor = "    path(",
  max_width = 200,
  noautocmd = true,
  offset_x = 1,
  offset_y = 2,
  stylize_markdown = true,
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}
 |3: {}
 |4: 2 |5: { "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)" }

󰘫  |1: extmark |2: 23 |3: 2 |4: 15 |5: 0 |6: MoreMsg
󰘫  |1: extmark |2: 23 |3: 1 |4: 15 |5: 0
󰘫  |1: extmark_id |2: 2
󰘫  |1: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	[string ":lua"]:1: in main chunk
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: bufnr, ns |2: 23 |3: 34
󰘫  |1: closing winnr |2: 1008
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path('admi
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 9
󰘫  |1: delta |2:     path('admi |3:     path('admi |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 9,
      line = 19
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/django_project/urls.py"
    }
  },
  version = 9
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 0,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "    path(",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 0 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 1, 15 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 1, 15 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: urlpatt
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: lsp cap:  |2: true |3: false |4: 7
󰘫  |1: delta |2: th('admi |3: urlpatt |4:     path('admi |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:257: in function 'handler'
	/usr/share/nvim/runtime/lua/vim/lsp.lua:1505: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: {
  _fix_pos = true,
  always_trigger = false,
  bind = true,
  check_completion_visible = true,
  client_id = 1,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  signature_result = {
    activeParameter = 5,
    activeSignature = 0,
    cfgActiveSignature = 0,
    signatures = { {
        activeParameter = 0,
        label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
        parameters = { {
            label = { 1, 15 }
          }, {
            label = { 17, 30 }
          }, {
            label = { 32, 61 }
          }, {
            label = { 63, 90 }
          }, {
            label = { 92, 122 }
          } }
      } }
  },
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: {
  _fix_pos = true,
  always_trigger = false,
  bind = true,
  check_completion_visible = true,
  client_id = 1,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  signature_result = {
    activeParameter = 5,
    activeSignature = 0,
    cfgActiveSignature = 0,
    signatures = { {
        activeParameter = 0,
        label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
        parameters = { {
            label = { 1, 15 }
          }, {
            label = { 17, 30 }
          }, {
            label = { 32, 61 }
          }, {
            label = { 63, 90 }
          }, {
            label = { 92, 122 }
          } }
      } }
  },
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	[string ":lua"]:1: in main chunk
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: {
  _fix_pos = true,
  always_trigger = false,
  bind = true,
  check_completion_visible = true,
  client_id = 1,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  signature_result = {
    activeParameter = 5,
    activeSignature = 0,
    cfgActiveSignature = 0,
    signatures = { {
        activeParameter = 0,
        label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
        parameters = { {
            label = { 1, 15 }
          }, {
            label = { 17, 30 }
          }, {
            label = { 32, 61 }
          }, {
            label = { 63, 90 }
          }, {
            label = { 92, 122 }
          } }
      } }
  },
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: {
  _fix_pos = true,
  always_trigger = false,
  bind = true,
  check_completion_visible = true,
  client_id = 1,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  signature_result = {
    activeParameter = 5,
    activeSignature = 0,
    cfgActiveSignature = 0,
    signatures = { {
        activeParameter = 0,
        label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
        parameters = { {
            label = { 1, 15 }
          }, {
            label = { 17, 30 }
          }, {
            label = { 32, 61 }
          }, {
            label = { 63, 90 }
          }, {
            label = { 92, 122 }
          } }
      } }
  },
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	[string ":lua"]:1: in main chunk
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: {
  _fix_pos = true,
  always_trigger = false,
  bind = true,
  check_completion_visible = true,
  client_id = 1,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  signature_result = {
    activeParameter = 5,
    activeSignature = 0,
    cfgActiveSignature = 0,
    signatures = { {
        activeParameter = 0,
        label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
        parameters = { {
            label = { 1, 15 }
          }, {
            label = { 17, 30 }
          }, {
            label = { 32, 61 }
          }, {
            label = { 63, 90 }
          }, {
            label = { 92, 122 }
          } }
      } }
  },
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: i
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: i
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	[string ":lua"]:1: in main chunk
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	[string ":lua"]:1: in main chunk
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	[string ":lua"]:1: in main chunk
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: i
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	[string ":lua"]:1: in main chunk
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: {
  _fix_pos = true,
  always_trigger = false,
  bind = true,
  check_completion_visible = true,
  client_id = 1,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  signature_result = {
    activeParameter = 5,
    activeSignature = 0,
    cfgActiveSignature = 0,
    signatures = { {
        activeParameter = 0,
        label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
        parameters = { {
            label = { 1, 15 }
          }, {
            label = { 17, 30 }
          }, {
            label = { 32, 61 }
          }, {
            label = { 63, 90 }
          }, {
            label = { 92, 122 }
          } }
      } }
  },
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: {
  _fix_pos = true,
  always_trigger = false,
  bind = true,
  check_completion_visible = true,
  client_id = 1,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  signature_result = {
    activeParameter = 5,
    activeSignature = 0,
    cfgActiveSignature = 0,
    signatures = { {
        activeParameter = 0,
        label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
        parameters = { {
            label = { 1, 15 }
          }, {
            label = { 17, 30 }
          }, {
            label = { 32, 61 }
          }, {
            label = { 63, 90 }
          }, {
            label = { 92, 122 }
          } }
      } }
  },
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	[string ":lua"]:1: in main chunk
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: 
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 0
󰘫  |1: delta |2:  |3:  |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:257: in function 'handler'
	/usr/share/nvim/runtime/lua/vim/lsp.lua:1505: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('about/', v
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 22
󰘫  |1: delta |2:         path('about/', v |3:         path('about/', v |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 96,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 22,
      line = 7
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 0
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 1,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "        path('about/',",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 1 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 17, 30 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 17, 30 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('', views.h
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 16
󰘫  |1: delta |2:         path('', views.h |3:         path('', views.h |4:         path('about/', v |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 96,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 16,
      line = 6
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 0
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 1,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "        path('',",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 1 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 17, 30 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 17, 30 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('', views.h
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 16
󰘫  |1: delta |2:         path('', views.h |3:         path('', views.h |4:         path('', views.h |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 96,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 16,
      line = 6
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 0
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 1,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "        path('',",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 1 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 17, 30 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 17, 30 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('', views.h
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 16
󰘫  |1: delta |2:         path('', views.h |3:         path('', views.h |4:         path('', views.h |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 96,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 16,
      line = 6
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 0
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 1,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "        path('',",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 1 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 17, 30 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 17, 30 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('', views.
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 16
󰘫  |1: delta |2: .h |3:         path('', views. |4:         path('', views.h |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 96,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 16,
      line = 6
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 0
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 1,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "        path('',",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 1 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 17, 30 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 17, 30 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('', views.
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 16
󰘫  |1: delta |2:         path('', views. |3:         path('', views. |4:         path('', views. |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 96,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 16,
      line = 6
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 0
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 1,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "        path('',",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 1 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 17, 30 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 17, 30 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: no active client
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('', 
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 16
󰘫  |1: delta |2:         path('',  |3:         path('',  |4:  |5: {}

󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 16,
      line = 6
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 0
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 1,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  check_completion_visible = true,
  line_to_cursor = "        path('',",
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 1 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 17, 30 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 17, 30 }
}

󰘫  |1: md lines trim |2: { "```python", "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)", "```" }

󰘫  |1: label: |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: 0 |4: 1 |5: 5 |6: {
  activeParameter = 1,
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  parameters = { {
      label = { 1, 15 }
    }, {
      label = { 17, 30 }
    }, {
      label = { 32, 61 }
    }, {
      label = { 63, 90 }
    }, {
      label = { 92, 122 }
    } }
}

󰘫  |1: win config |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature963",
  line_to_cursor = "        path('',",
  max_height = 50,
  max_width = 200,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}

󰘫  |1: cleanup vt |2: 14
󰘫  |1: virtual text:  |2: 6 |3: 7 |4: { "  view: Unknown", "Comment" }

󰘫  |1: floating opt |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature963",
  focusable = true,
  line_to_cursor = "        path('',",
  max_width = 200,
  noautocmd = true,
  offset_x = 1,
  offset_y = 2,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}
 |3: {}
 |4: 2 |5: { "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)" }

󰘫  |1: sig_cfg new bufnr, winnr  |2: 14 |3: 1008
󰘫  |1: extmark |2: 14 |3: 18 |4: 30 |5: 0 |6: MoreMsg
󰘫  |1: extmark |2: 14 |3: 17 |4: 30 |5: 0
󰘫  |1: extmark_id |2: 1
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('',
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 16
󰘫  |1: delta |2: ,  |3:         path('', |4:         path('',  |5: {}

󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 16,
      line = 6
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 5
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 1,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  check_completion_visible = true,
  line_to_cursor = "        path('',",
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 1 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 17, 30 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 17, 30 }
}

󰘫  |1: md lines trim |2: { "```python", "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)", "```" }

󰘫  |1: label: |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: 0 |4: 1 |5: 5 |6: {
  activeParameter = 1,
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  parameters = { {
      label = { 1, 15 }
    }, {
      label = { 17, 30 }
    }, {
      label = { 32, 61 }
    }, {
      label = { 63, 90 }
    }, {
      label = { 92, 122 }
    } }
}

󰘫  |1: win config |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature609",
  line_to_cursor = "        path('',",
  max_height = 50,
  max_width = 200,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}

󰘫  |1: cleanup vt |2: 14
󰘫  |1: bufnr, ns |2: 14 |3: 36
󰘫  |1: virtual text:  |2: 6 |3: 7 |4: { "  view: Unknown", "Comment" }

󰘫  |1: floating opt |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature609",
  focusable = true,
  line_to_cursor = "        path('',",
  max_width = 200,
  noautocmd = true,
  offset_x = 1,
  offset_y = 2,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}
 |3: {}
 |4: 2 |5: { "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)" }

󰘫  |1: extmark |2: 14 |3: 18 |4: 30 |5: 0 |6: MoreMsg
󰘫  |1: extmark |2: 14 |3: 17 |4: 30 |5: 0
󰘫  |1: extmark_id |2: 2
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: bufnr, ns |2: 14 |3: 36
󰘫  |1: closing winnr |2: 1008
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('', 
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 16
󰘫  |1: delta |2:         path('',  |3:         path('',  |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 16,
      line = 6
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 6
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 1,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "        path('',",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 1 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 17, 30 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 17, 30 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('', 
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 16
󰘫  |1: delta |2:         path('',  |3:         path('',  |4:         path('',  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 16,
      line = 6
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 6
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 1,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "        path('',",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 1 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 17, 30 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 17, 30 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('about/',
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 22
󰘫  |1: delta |2: out/', |3:         path('about/', |4:         path('',  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 22,
      line = 7
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 6
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 1,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "        path('about/',",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 1 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 17, 30 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 17, 30 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('about/', 
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 22
󰘫  |1: delta |2:         path('about/',  |3:         path('about/',  |4:  |5: {}

󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 22,
      line = 7
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 6
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 1,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  check_completion_visible = true,
  line_to_cursor = "        path('about/',",
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 1 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 17, 30 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 17, 30 }
}

󰘫  |1: md lines trim |2: { "```python", "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)", "```" }

󰘫  |1: label: |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: 0 |4: 1 |5: 5 |6: {
  activeParameter = 1,
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  parameters = { {
      label = { 1, 15 }
    }, {
      label = { 17, 30 }
    }, {
      label = { 32, 61 }
    }, {
      label = { 63, 90 }
    }, {
      label = { 92, 122 }
    } }
}

󰘫  |1: win config |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature311",
  line_to_cursor = "        path('about/',",
  max_height = 50,
  max_width = 200,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}

󰘫  |1: cleanup vt |2: 14
󰘫  |1: virtual text:  |2: 7 |3: 8 |4: { "                         view: Unknown", "Comment" }

󰘫  |1: floating opt |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature311",
  focusable = true,
  line_to_cursor = "        path('about/',",
  max_width = 200,
  noautocmd = true,
  offset_x = 1,
  offset_y = 2,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}
 |3: {}
 |4: 2 |5: { "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)" }

󰘫  |1: sig_cfg new bufnr, winnr  |2: 21 |3: 1009
󰘫  |1: extmark |2: 21 |3: 18 |4: 30 |5: 0 |6: MoreMsg
󰘫  |1: extmark |2: 21 |3: 17 |4: 30 |5: 0
󰘫  |1: extmark_id |2: 1
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('about/',
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 22
󰘫  |1: delta |2: ,  |3:         path('about/', |4:         path('about/',  |5: {}

󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 22,
      line = 7
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 8
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 1,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  check_completion_visible = true,
  line_to_cursor = "        path('about/',",
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 1 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 17, 30 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 17, 30 }
}

󰘫  |1: md lines trim |2: { "```python", "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)", "```" }

󰘫  |1: label: |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: 0 |4: 1 |5: 5 |6: {
  activeParameter = 1,
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  parameters = { {
      label = { 1, 15 }
    }, {
      label = { 17, 30 }
    }, {
      label = { 32, 61 }
    }, {
      label = { 63, 90 }
    }, {
      label = { 92, 122 }
    } }
}

󰘫  |1: win config |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature748",
  line_to_cursor = "        path('about/',",
  max_height = 50,
  max_width = 200,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}

󰘫  |1: cleanup vt |2: 14
󰘫  |1: bufnr, ns |2: 21 |3: 36
󰘫  |1: virtual text:  |2: 7 |3: 8 |4: { "                        view: Unknown", "Comment" }

󰘫  |1: floating opt |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature748",
  focusable = true,
  line_to_cursor = "        path('about/',",
  max_width = 200,
  noautocmd = true,
  offset_x = 1,
  offset_y = 2,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}
 |3: {}
 |4: 2 |5: { "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)" }

󰘫  |1: extmark |2: 21 |3: 18 |4: 30 |5: 0 |6: MoreMsg
󰘫  |1: extmark |2: 21 |3: 17 |4: 30 |5: 0
󰘫  |1: extmark_id |2: 2
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: bufnr, ns |2: 21 |3: 36
󰘫  |1: closing winnr |2: 1009
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('about/'
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 13
󰘫  |1: delta |2:         path('about/' |3:         path('about/' |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 13,
      line = 7
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 8
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 0,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "        path(",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 0 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 1, 15 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 1, 15 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('about/'
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 13
󰘫  |1: delta |2:         path('about/' |3:         path('about/' |4:         path('about/' |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 13,
      line = 7
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 8
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 0,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "        path(",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 0 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 1, 15 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 1, 15 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: 
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 0
󰘫  |1: delta |2:         path('about/' |3:  |4:         path('about/' |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:257: in function 'handler'
	/usr/share/nvim/runtime/lua/vim/lsp.lua:1505: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 8
󰘫  |1: delta |2:          |3:          |4:  |5: {}

󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 4
󰘫  |1: delta |2:       |3:      |4:          |5: {}

󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: 
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 0
󰘫  |1: delta |2:      |3:  |4:      |5: {}

󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: urlpatterns = 
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: lsp cap:  |2: true |3: false |4: 14
󰘫  |1: delta |2: urlpatterns =  |3: urlpatterns =  |4:  |5: {}

󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	[string ":lua"]:1: in main chunk
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('about/',views.about, name='blog-about')
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: )
󰘫  |1: lsp cap:  |2: true |3: true |4: 53
󰘫  |1: delta |2:         path('about/',views.about, name='blog-about') |3:         path('about/',views.about, name='blog-about') |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:257: in function 'handler'
	/usr/share/nvim/runtime/lua/vim/lsp.lua:1505: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 8
󰘫  |1: delta |2:          |3:          |4:  |5: {}

󰘫  |1: mode:    |2: niI
󰘫  |1: mode:  niI  |2: niI
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: urlpatterns = [path('', views.home, 
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 35
󰘫  |1: delta |2: urlpatterns = [path('', views.home,  |3: urlpatterns = [path('', views.home,  |4:  |5: {}

󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: urlpatterns = [path('', views.home, 
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 35
󰘫  |1: delta |2: urlpatterns = [path('', views.home,  |3: urlpatterns = [path('', views.home,  |4: urlpatterns = [path('', views.home,  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: i
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 35,
      line = 5
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 23
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 2,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  check_completion_visible = true,
  line_to_cursor = "urlpatterns = [path('', views.home,",
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 2 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 32, 61 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 32, 61 }
}

󰘫  |1: md lines trim |2: { "```python", "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)", "```" }

󰘫  |1: label: |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: 0 |4: 1 |5: 5 |6: {
  activeParameter = 2,
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  parameters = { {
      label = { 1, 15 }
    }, {
      label = { 17, 30 }
    }, {
      label = { 32, 61 }
    }, {
      label = { 63, 90 }
    }, {
      label = { 92, 122 }
    } }
}

󰘫  |1: win config |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature579",
  line_to_cursor = "urlpatterns = [path('', views.home,",
  max_height = 50,
  max_width = 200,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}

󰘫  |1: cleanup vt |2: 14
󰘫  |1: virtual text:  |2: 5 |3: 6 |4: { "                                      kwargs: Unknown | None = None", "Comment" }

󰘫  |1: floating opt |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature579",
  focusable = true,
  line_to_cursor = "urlpatterns = [path('', views.home,",
  max_width = 200,
  noautocmd = true,
  offset_x = 1,
  offset_y = 2,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}
 |3: {}
 |4: 2 |5: { "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)" }

󰘫  |1: sig_cfg new bufnr, winnr  |2: 34 |3: 1013
󰘫  |1: extmark |2: 34 |3: 33 |4: 61 |5: 0 |6: MoreMsg
󰘫  |1: extmark |2: 34 |3: 32 |4: 61 |5: 0
󰘫  |1: extmark_id |2: 1
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 35,
      line = 5
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 23
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 2,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "urlpatterns = [path('', views.home,",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 2 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 32, 61 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 32, 61 }
}

󰘫  |1: md lines trim |2: { "```python", "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)", "```" }

󰘫  |1: label: |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: 0 |4: 1 |5: 5 |6: {
  activeParameter = 2,
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  parameters = { {
      label = { 1, 15 }
    }, {
      label = { 17, 30 }
    }, {
      label = { 32, 61 }
    }, {
      label = { 63, 90 }
    }, {
      label = { 92, 122 }
    } }
}

󰘫  |1: win config |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  close_events = { "CursorMoved", "CursorMovedI", "BufHidden", "InsertCharPre" },
  focus_id = "lsp_signature757",
  line_to_cursor = "urlpatterns = [path('', views.home,",
  max_height = 50,
  max_width = 200,
  stylize_markdown = true,
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}

󰘫  |1: cleanup vt |2: 14
󰘫  |1: bufnr, ns |2: 34 |3: 36
󰘫  |1: virtual text:  |2: 5 |3: 6 |4: { "                                      kwargs: Unknown | None = None", "Comment" }

󰘫  |1: floating opt |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  close_events = { "CursorMoved", "CursorMovedI", "BufHidden", "InsertCharPre" },
  focus_id = "lsp_signature757",
  focusable = true,
  line_to_cursor = "urlpatterns = [path('', views.home,",
  max_width = 200,
  noautocmd = true,
  offset_x = 1,
  offset_y = 2,
  stylize_markdown = true,
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}
 |3: {}
 |4: 2 |5: { "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)" }

󰘫  |1: extmark |2: 34 |3: 33 |4: 61 |5: 0 |6: MoreMsg
󰘫  |1: extmark |2: 34 |3: 32 |4: 61 |5: 0
󰘫  |1: extmark_id |2: 2
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	[string ":lua"]:1: in main chunk
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: bufnr, ns |2: 34 |3: 36
󰘫  |1: closing winnr |2: 1013
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: 
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 0
󰘫  |1: delta |2:  |3:  |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 0,
      line = 6
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 23
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 3,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 3 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 63, 90 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 63, 90 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: 
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 0
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: urlpatterns = [path('', views.home, path('about/',views.about, name='blog-about'),
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 82
󰘫  |1: delta |2: urlpatterns = [path('', views.home, path('about/',views.about, name='blog-about'), |3: urlpatterns = [path('', views.home, path('about/',views.about, name='blog-about'), |4:  |5: {}

󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 82,
      line = 5
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 25
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 3,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  check_completion_visible = true,
  line_to_cursor = "urlpatterns = [path('', views.home, path('about/',views.about, name='blog-about'),",
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 3 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 63, 90 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 63, 90 }
}

󰘫  |1: md lines trim |2: { "```python", "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)", "```" }

󰘫  |1: label: |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: 0 |4: 1 |5: 5 |6: {
  activeParameter = 3,
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  parameters = { {
      label = { 1, 15 }
    }, {
      label = { 17, 30 }
    }, {
      label = { 32, 61 }
    }, {
      label = { 63, 90 }
    }, {
      label = { 92, 122 }
    } }
}

󰘫  |1: win config |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature151",
  line_to_cursor = "urlpatterns = [path('', views.home, path('about/',views.about, name='blog-about'),",
  max_height = 50,
  max_width = 200,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}

󰘫  |1: cleanup vt |2: 14
󰘫  |1: virtual text:  |2: 5 |3: 6 |4: { "                                                                           name: Unknown | None = None", "Comment" }

󰘫  |1: floating opt |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature151",
  focusable = true,
  line_to_cursor = "urlpatterns = [path('', views.home, path('about/',views.about, name='blog-about'),",
  max_width = 200,
  noautocmd = true,
  offset_x = 1,
  offset_y = 2,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}
 |3: {}
 |4: 2 |5: { "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)" }

󰘫  |1: sig_cfg new bufnr, winnr  |2: 35 |3: 1014
󰘫  |1: extmark |2: 35 |3: 64 |4: 90 |5: 0 |6: MoreMsg
󰘫  |1: extmark |2: 35 |3: 63 |4: 90 |5: 0
󰘫  |1: extmark_id |2: 1
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	[string ":lua"]:1: in main chunk
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: bufnr, ns |2: 35 |3: 36
󰘫  |1: closing winnr |2: 1014
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 8
󰘫  |1: delta |2:          |3:          |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 8,
      line = 6
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 25
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 3,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "        ",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 3 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 63, 90 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 63, 90 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 8
󰘫  |1: delta |2:          |3:          |4:  |5: {}

󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 4
󰘫  |1: delta |2:       |3:      |4:          |5: {}

󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: 
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 0
󰘫  |1: delta |2:      |3:  |4:      |5: {}

󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: urlpatterns = [path('', views.home, path('about/',views.about, name='blog-about'),
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 82
󰘫  |1: delta |2: urlpatterns = [path('', views.home, path('about/',views.about, name='blog-about'), |3: urlpatterns = [path('', views.home, path('about/',views.about, name='blog-about'), |4:  |5: {}

󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 82,
      line = 5
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 35
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 3,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  check_completion_visible = true,
  line_to_cursor = "urlpatterns = [path('', views.home, path('about/',views.about, name='blog-about'),",
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 3 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 63, 90 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 63, 90 }
}

󰘫  |1: md lines trim |2: { "```python", "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)", "```" }

󰘫  |1: label: |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: 0 |4: 1 |5: 5 |6: {
  activeParameter = 3,
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  parameters = { {
      label = { 1, 15 }
    }, {
      label = { 17, 30 }
    }, {
      label = { 32, 61 }
    }, {
      label = { 63, 90 }
    }, {
      label = { 92, 122 }
    } }
}

󰘫  |1: win config |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature705",
  line_to_cursor = "urlpatterns = [path('', views.home, path('about/',views.about, name='blog-about'),",
  max_height = 50,
  max_width = 200,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}

󰘫  |1: cleanup vt |2: 14
󰘫  |1: virtual text:  |2: 5 |3: 5 |4: { "  name: Unknown | None = None", "Comment" }

󰘫  |1: floating opt |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature705",
  focusable = true,
  line_to_cursor = "urlpatterns = [path('', views.home, path('about/',views.about, name='blog-about'),",
  max_width = 200,
  noautocmd = true,
  offset_x = 1,
  offset_y = 2,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}
 |3: {}
 |4: 2 |5: { "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)" }

󰘫  |1: sig_cfg new bufnr, winnr  |2: 36 |3: 1015
󰘫  |1: extmark |2: 36 |3: 64 |4: 90 |5: 0 |6: MoreMsg
󰘫  |1: extmark |2: 36 |3: 63 |4: 90 |5: 0
󰘫  |1: extmark_id |2: 1
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	[string ":lua"]:1: in main chunk
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: bufnr, ns |2: 36 |3: 36
󰘫  |1: closing winnr |2: 1015
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: urlpatterns = [path('', views.home, path('about/',views.about, name='blog-about')
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: )
󰘫  |1: lsp cap:  |2: true |3: true |4: 81
󰘫  |1: delta |2: urlpatterns = [path('', views.home, path('about/',views.about, name='blog-about') |3: urlpatterns = [path('', views.home, path('about/',views.about, name='blog-about') |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:257: in function 'handler'
	/usr/share/nvim/runtime/lua/vim/lsp.lua:1505: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: urlpatterns = [path('', views.home, path('about/',views.about, name='blog-about'),
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 82
󰘫  |1: delta |2: urlpatterns = [path('', views.home, path('about/',views.about, name='blog-about'), |3: urlpatterns = [path('', views.home, path('about/',views.about, name='blog-about'), |4:  |5: {}

󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 82,
      line = 5
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 35
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 3,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  check_completion_visible = true,
  line_to_cursor = "urlpatterns = [path('', views.home, path('about/',views.about, name='blog-about'),",
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 3 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 63, 90 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 63, 90 }
}

󰘫  |1: md lines trim |2: { "```python", "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)", "```" }

󰘫  |1: label: |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: 0 |4: 1 |5: 5 |6: {
  activeParameter = 3,
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  parameters = { {
      label = { 1, 15 }
    }, {
      label = { 17, 30 }
    }, {
      label = { 32, 61 }
    }, {
      label = { 63, 90 }
    }, {
      label = { 92, 122 }
    } }
}

󰘫  |1: win config |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature455",
  line_to_cursor = "urlpatterns = [path('', views.home, path('about/',views.about, name='blog-about'),",
  max_height = 50,
  max_width = 200,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}

󰘫  |1: cleanup vt |2: 14
󰘫  |1: virtual text:  |2: 5 |3: 5 |4: { "  name: Unknown | None = None", "Comment" }

󰘫  |1: floating opt |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature455",
  focusable = true,
  line_to_cursor = "urlpatterns = [path('', views.home, path('about/',views.about, name='blog-about'),",
  max_width = 200,
  noautocmd = true,
  offset_x = 1,
  offset_y = 2,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}
 |3: {}
 |4: 2 |5: { "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)" }

󰘫  |1: sig_cfg new bufnr, winnr  |2: 37 |3: 1016
󰘫  |1: extmark |2: 37 |3: 64 |4: 90 |5: 0 |6: MoreMsg
󰘫  |1: extmark |2: 37 |3: 63 |4: 90 |5: 0
󰘫  |1: extmark_id |2: 1
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: urlpatterns = [path('', views.home, path('about/',views.about, name='blog-about'
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 62
󰘫  |1: delta |2: '), |3: urlpatterns = [path('', views.home, path('about/',views.about, name='blog-about' |4: urlpatterns = [path('', views.home, path('about/',views.about, name='blog-about'), |5: {}

󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 62,
      line = 5
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 36
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 3,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  check_completion_visible = true,
  line_to_cursor = "urlpatterns = [path('', views.home, path('about/',views.about,",
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 3 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 63, 90 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 63, 90 }
}

󰘫  |1: md lines trim |2: { "```python", "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)", "```" }

󰘫  |1: label: |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: 0 |4: 1 |5: 5 |6: {
  activeParameter = 3,
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  parameters = { {
      label = { 1, 15 }
    }, {
      label = { 17, 30 }
    }, {
      label = { 32, 61 }
    }, {
      label = { 63, 90 }
    }, {
      label = { 92, 122 }
    } }
}

󰘫  |1: win config |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature27",
  line_to_cursor = "urlpatterns = [path('', views.home, path('about/',views.about,",
  max_height = 50,
  max_width = 200,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}

󰘫  |1: cleanup vt |2: 14
󰘫  |1: bufnr, ns |2: 37 |3: 36
󰘫  |1: virtual text:  |2: 5 |3: 5 |4: { "  name: Unknown | None = None", "Comment" }

󰘫  |1: floating opt |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature27",
  focusable = true,
  line_to_cursor = "urlpatterns = [path('', views.home, path('about/',views.about,",
  max_width = 200,
  noautocmd = true,
  offset_x = 1,
  offset_y = 2,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}
 |3: {}
 |4: 2 |5: { "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)" }

󰘫  |1: extmark |2: 37 |3: 64 |4: 90 |5: 0 |6: MoreMsg
󰘫  |1: extmark |2: 37 |3: 63 |4: 90 |5: 0
󰘫  |1: extmark_id |2: 2
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	[string ":lua"]:1: in main chunk
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: bufnr, ns |2: 37 |3: 36
󰘫  |1: closing winnr |2: 1016
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: 
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 0
󰘫  |1: delta |2:  |3:  |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:257: in function 'handler'
	/usr/share/nvim/runtime/lua/vim/lsp.lua:1505: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: urlpatterns = [path('', views.home
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 23
󰘫  |1: delta |2: urlpatterns = [path('', views.home |3: urlpatterns = [path('', views.home |4:  |5: {}

󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 23,
      line = 5
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 36
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 1,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  check_completion_visible = true,
  line_to_cursor = "urlpatterns = [path('',",
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 1 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 17, 30 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 17, 30 }
}

󰘫  |1: md lines trim |2: { "```python", "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)", "```" }

󰘫  |1: label: |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: 0 |4: 1 |5: 5 |6: {
  activeParameter = 1,
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  parameters = { {
      label = { 1, 15 }
    }, {
      label = { 17, 30 }
    }, {
      label = { 32, 61 }
    }, {
      label = { 63, 90 }
    }, {
      label = { 92, 122 }
    } }
}

󰘫  |1: win config |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature297",
  line_to_cursor = "urlpatterns = [path('',",
  max_height = 50,
  max_width = 200,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}

󰘫  |1: cleanup vt |2: 14
󰘫  |1: virtual text:  |2: 5 |3: 5 |4: { "  view: Unknown", "Comment" }

󰘫  |1: floating opt |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature297",
  focusable = true,
  line_to_cursor = "urlpatterns = [path('',",
  max_width = 200,
  noautocmd = true,
  offset_x = 1,
  offset_y = 2,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}
 |3: {}
 |4: 2 |5: { "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)" }

󰘫  |1: sig_cfg new bufnr, winnr  |2: 38 |3: 1017
󰘫  |1: extmark |2: 38 |3: 18 |4: 30 |5: 0 |6: MoreMsg
󰘫  |1: extmark |2: 38 |3: 17 |4: 30 |5: 0
󰘫  |1: extmark_id |2: 1
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: urlpatterns = [path('', views.home
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 23
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	[string ":lua"]:1: in main chunk
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: bufnr, ns |2: 38 |3: 36
󰘫  |1: closing winnr |2: 1017
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: urlpatterns = [path('', views.home
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 23
󰘫  |1: delta |2: urlpatterns = [path('', views.home |3: urlpatterns = [path('', views.home |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 23,
      line = 5
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 37
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 1,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "urlpatterns = [path('',",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 1 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 17, 30 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 17, 30 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: urlpatterns = 
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: lsp cap:  |2: true |3: false |4: 14
󰘫  |1: delta |2:  [path('', views.home |3: urlpatterns =  |4: urlpatterns = [path('', views.home |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:257: in function 'handler'
	/usr/share/nvim/runtime/lua/vim/lsp.lua:1505: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: no active client
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: 
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 0
󰘫  |1: delta |2:  |3: 
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: 
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 0
󰘫  |1: delta |2:  |3:  |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: 
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 0
󰘫  |1: delta |2:  |3:  |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: 
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 0
󰘫  |1: delta |2:  |3:  |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: no active client
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: 
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 0
󰘫  |1: delta |2:  |3: 
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:  
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 1
󰘫  |1: delta |2:   |3:   |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:  
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 1
󰘫  |1: delta |2:   |3:   |4:   |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:  
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 1
󰘫  |1: delta |2:   |3:   |4:   |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:  
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 1
󰘫  |1: delta |2:   |3:   |4:   |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	[string ":lua"]:1: in main chunk
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: 
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 0
󰘫  |1: delta |2:  |3:  |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path('blo
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 9
󰘫  |1: delta |2:     path('blo |3:     path('blo |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 57,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 9,
      line = 20
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/django_project/urls.py"
    }
  },
  version = 0
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 0,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "    path(",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 0 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 1, 15 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 1, 15 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path('blo
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 9
󰘫  |1: delta |2:     path('blo |3:     path('blo |4:     path('blo |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 57,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 9,
      line = 20
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/django_project/urls.py"
    }
  },
  version = 0
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 0,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "    path(",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 0 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 1, 15 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 1, 15 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path('blog
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 9
󰘫  |1: delta |2:     path('blog |3:     path('blog |4:  |5: {}

󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 57,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 9,
      line = 20
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/django_project/urls.py"
    }
  },
  version = 0
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 0,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  check_completion_visible = true,
  line_to_cursor = "    path(",
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 0 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 1, 15 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 1, 15 }
}

󰘫  |1: md lines trim |2: { "```python", "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)", "```" }

󰘫  |1: label: |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: 0 |4: 1 |5: 5 |6: {
  activeParameter = 0,
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  parameters = { {
      label = { 1, 15 }
    }, {
      label = { 17, 30 }
    }, {
      label = { 32, 61 }
    }, {
      label = { 63, 90 }
    }, {
      label = { 92, 122 }
    } }
}

󰘫  |1: win config |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature376",
  line_to_cursor = "    path(",
  max_height = 50,
  max_width = 200,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}

󰘫  |1: cleanup vt |2: 14
󰘫  |1: virtual text:  |2: 20 |3: 21 |4: { "               route: Unknown", "Comment" }

󰘫  |1: floating opt |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature376",
  focusable = true,
  line_to_cursor = "    path(",
  max_width = 200,
  noautocmd = true,
  offset_x = 1,
  offset_y = 2,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}
 |3: {}
 |4: 2 |5: { "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)" }

󰘫  |1: sig_cfg new bufnr, winnr  |2: 59 |3: 1016
󰘫  |1: extmark |2: 59 |3: 2 |4: 15 |5: 0 |6: MoreMsg
󰘫  |1: extmark |2: 59 |3: 1 |4: 15 |5: 0
󰘫  |1: extmark_id |2: 1
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: bufnr, ns |2: 59 |3: 45
󰘫  |1: closing winnr |2: 1016
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: from django.urls import path,
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 29
󰘫  |1: delta |2: from django.urls import path, |3: from django.urls import path, |4:  |5: {}

󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:257: in function 'handler'
	/usr/share/nvim/runtime/lua/vim/lsp.lua:1505: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: i
󰘫  |1: cleanup vt |2: 14
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: from django.urls import path, 
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 29
󰘫  |1: delta |2: ,  |3: from django.urls import path,  |4: from django.urls import path, |5: {}

󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:257: in function 'handler'
	/usr/share/nvim/runtime/lua/vim/lsp.lua:1505: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: i
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: from django.urls import path,
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 29
󰘫  |1: delta |2: from django.urls import path, |3: from django.urls import path, |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:257: in function 'handler'
	/usr/share/nvim/runtime/lua/vim/lsp.lua:1505: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path('admin/'
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 9
󰘫  |1: delta |2:  import path, |3:     path('admin/' |4: from django.urls import path, |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 57,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 9,
      line = 19
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/django_project/urls.py"
    }
  },
  version = 3
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 0,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "    path(",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 0 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 1, 15 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 1, 15 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:  
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 1
󰘫  |1: delta |2:     path('admin/' |3:   |4:     path('admin/' |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:257: in function 'handler'
	/usr/share/nvim/runtime/lua/vim/lsp.lua:1505: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path(''
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 13
󰘫  |1: delta |2:         path('' |3:         path('' |4:  |5: {}

󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 13,
      line = 6
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 0
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 0,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  check_completion_visible = true,
  line_to_cursor = "        path(",
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 0 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 1, 15 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 1, 15 }
}

󰘫  |1: md lines trim |2: { "```python", "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)", "```" }

󰘫  |1: label: |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: 0 |4: 1 |5: 5 |6: {
  activeParameter = 0,
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  parameters = { {
      label = { 1, 15 }
    }, {
      label = { 17, 30 }
    }, {
      label = { 32, 61 }
    }, {
      label = { 63, 90 }
    }, {
      label = { 92, 122 }
    } }
}

󰘫  |1: win config |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature502",
  line_to_cursor = "        path(",
  max_height = 50,
  max_width = 200,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}

󰘫  |1: cleanup vt |2: 14
󰘫  |1: virtual text:  |2: 6 |3: 7 |4: { "  route: Unknown", "Comment" }

󰘫  |1: floating opt |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature502",
  focusable = true,
  line_to_cursor = "        path(",
  max_width = 200,
  noautocmd = true,
  offset_x = 1,
  offset_y = 2,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}
 |3: {}
 |4: 2 |5: { "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)" }

󰘫  |1: sig_cfg new bufnr, winnr  |2: 60 |3: 1017
󰘫  |1: extmark |2: 60 |3: 2 |4: 15 |5: 0 |6: MoreMsg
󰘫  |1: extmark |2: 60 |3: 1 |4: 15 |5: 0
󰘫  |1: extmark_id |2: 1
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path(' 
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 13
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 13
󰘫  |1: delta |2: '  |3:         path(' |4:         path('  |5: {}

󰘫  |1: mode:    |2: i
󰘫  |1: should not trigger
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 13
󰘫  |1: delta |2:         path(' |3:         path(' |4:         path(' |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: i
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 13,
      line = 6
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 6
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 0,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "        path(",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 0 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 1, 15 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 1, 15 }
}

󰘫  |1: md lines trim |2: { "```python", "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)", "```" }

󰘫  |1: label: |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: 0 |4: 1 |5: 5 |6: {
  activeParameter = 0,
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  parameters = { {
      label = { 1, 15 }
    }, {
      label = { 17, 30 }
    }, {
      label = { 32, 61 }
    }, {
      label = { 63, 90 }
    }, {
      label = { 92, 122 }
    } }
}

󰘫  |1: win config |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  close_events = { "CursorMoved", "CursorMovedI", "BufHidden", "InsertCharPre" },
  focus_id = "lsp_signature836",
  line_to_cursor = "        path(",
  max_height = 50,
  max_width = 200,
  stylize_markdown = true,
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}

󰘫  |1: cleanup vt |2: 14
󰘫  |1: bufnr, ns |2: 60 |3: 45
󰘫  |1: virtual text:  |2: 6 |3: 7 |4: { "  route: Unknown", "Comment" }

󰘫  |1: floating opt |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  close_events = { "CursorMoved", "CursorMovedI", "BufHidden", "InsertCharPre" },
  focus_id = "lsp_signature836",
  focusable = true,
  line_to_cursor = "        path(",
  max_width = 200,
  noautocmd = true,
  offset_x = 1,
  offset_y = 2,
  stylize_markdown = true,
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}
 |3: {}
 |4: 2 |5: { "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)" }

󰘫  |1: extmark |2: 60 |3: 2 |4: 15 |5: 0 |6: MoreMsg
󰘫  |1: extmark |2: 60 |3: 1 |4: 15 |5: 0
󰘫  |1: extmark_id |2: 2
󰘫  |1: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	[string ":lua"]:1: in main chunk
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: bufnr, ns |2: 60 |3: 45
󰘫  |1: closing winnr |2: 1017
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('about/',views.about, name='blog-
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 34
󰘫  |1: delta |2:         path('about/',views.about, name='blog- |3:         path('about/',views.about, name='blog- |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 34,
      line = 7
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 6
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 3,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "        path('about/',views.about,",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 3 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 63, 90 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 63, 90 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('about/',views.about, name='blog-about'),
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 54
󰘫  |1: delta |2:         path('about/',views.about, name='blog-about'), |3:         path('about/',views.about, name='blog-about'), |4:  |5: {}

󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:257: in function 'handler'
	/usr/share/nvim/runtime/lua/vim/lsp.lua:1505: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: i
󰘫  |1: cleanup vt |2: 14
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('about/',views.about, name='blog-about'
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 34
󰘫  |1: delta |2: '), |3:         path('about/',views.about, name='blog-about' |4:         path('about/',views.about, name='blog-about'), |5: {}

󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 34,
      line = 7
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 7
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 3,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  check_completion_visible = true,
  line_to_cursor = "        path('about/',views.about,",
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 3 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 63, 90 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 63, 90 }
}

󰘫  |1: md lines trim |2: { "```python", "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)", "```" }

󰘫  |1: label: |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: 0 |4: 1 |5: 5 |6: {
  activeParameter = 3,
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  parameters = { {
      label = { 1, 15 }
    }, {
      label = { 17, 30 }
    }, {
      label = { 32, 61 }
    }, {
      label = { 63, 90 }
    }, {
      label = { 92, 122 }
    } }
}

󰘫  |1: win config |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature565",
  line_to_cursor = "        path('about/',views.about,",
  max_height = 50,
  max_width = 200,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}

󰘫  |1: cleanup vt |2: 14
󰘫  |1: virtual text:  |2: 7 |3: 8 |4: { "                                                       name: Unknown | None = None", "Comment" }

󰘫  |1: floating opt |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature565",
  focusable = true,
  line_to_cursor = "        path('about/',views.about,",
  max_width = 200,
  noautocmd = true,
  offset_x = 1,
  offset_y = 2,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}
 |3: {}
 |4: 2 |5: { "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)" }

󰘫  |1: sig_cfg new bufnr, winnr  |2: 61 |3: 1018
󰘫  |1: extmark |2: 61 |3: 64 |4: 90 |5: 0 |6: MoreMsg
󰘫  |1: extmark |2: 61 |3: 63 |4: 90 |5: 0
󰘫  |1: extmark_id |2: 1
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: bufnr, ns |2: 61 |3: 45
󰘫  |1: closing winnr |2: 1018
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('about/',views.about, name='blog-about'
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 34
󰘫  |1: delta |2:         path('about/',views.about, name='blog-about' |3:         path('about/',views.about, name='blog-about' |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 34,
      line = 7
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 7
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 3,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "        path('about/',views.about,",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 3 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 63, 90 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 63, 90 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path('admin/'
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 9
󰘫  |1: delta |2: out/',views.about, name='blog-about' |3:     path('admin/' |4:         path('about/',views.about, name='blog-about' |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 57,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 9,
      line = 19
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/django_project/urls.py"
    }
  },
  version = 3
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 0,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "    path(",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 0 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 1, 15 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 1, 15 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('about/',views.about, name='blog-about'
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 34
󰘫  |1: delta |2: out/',views.about, name='blog-about' |3:         path('about/',views.about, name='blog-about' |4:     path('admin/' |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 34,
      line = 7
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 7
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 3,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "        path('about/',views.about,",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 3 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 63, 90 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 63, 90 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('about/'
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 13
󰘫  |1: delta |2:         path('about/' |3:         path('about/' |4:  |5: {}

󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 13,
      line = 7
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 7
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 0,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  check_completion_visible = true,
  line_to_cursor = "        path(",
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 0 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 1, 15 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 1, 15 }
}

󰘫  |1: md lines trim |2: { "```python", "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)", "```" }

󰘫  |1: label: |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: 0 |4: 1 |5: 5 |6: {
  activeParameter = 0,
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  parameters = { {
      label = { 1, 15 }
    }, {
      label = { 17, 30 }
    }, {
      label = { 32, 61 }
    }, {
      label = { 63, 90 }
    }, {
      label = { 92, 122 }
    } }
}

󰘫  |1: win config |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature444",
  line_to_cursor = "        path(",
  max_height = 50,
  max_width = 200,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}

󰘫  |1: cleanup vt |2: 14
󰘫  |1: virtual text:  |2: 7 |3: 8 |4: { "                       route: Unknown", "Comment" }

󰘫  |1: floating opt |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature444",
  focusable = true,
  line_to_cursor = "        path(",
  max_width = 200,
  noautocmd = true,
  offset_x = 1,
  offset_y = 2,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}
 |3: {}
 |4: 2 |5: { "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)" }

󰘫  |1: sig_cfg new bufnr, winnr  |2: 62 |3: 1019
󰘫  |1: extmark |2: 62 |3: 2 |4: 15 |5: 0 |6: MoreMsg
󰘫  |1: extmark |2: 62 |3: 1 |4: 15 |5: 0
󰘫  |1: extmark_id |2: 1
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('about/', 
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 22
󰘫  |1: delta |2: ',  |3:         path('about/',  |4:         path('about/' |5: {}

󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 22,
      line = 7
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 9
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 1,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  check_completion_visible = true,
  line_to_cursor = "        path('about/',",
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 1 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 17, 30 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 17, 30 }
}

󰘫  |1: md lines trim |2: { "```python", "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)", "```" }

󰘫  |1: label: |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: 0 |4: 1 |5: 5 |6: {
  activeParameter = 1,
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  parameters = { {
      label = { 1, 15 }
    }, {
      label = { 17, 30 }
    }, {
      label = { 32, 61 }
    }, {
      label = { 63, 90 }
    }, {
      label = { 92, 122 }
    } }
}

󰘫  |1: win config |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature425",
  line_to_cursor = "        path('about/',",
  max_height = 50,
  max_width = 200,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}

󰘫  |1: cleanup vt |2: 14
󰘫  |1: bufnr, ns |2: 62 |3: 45
󰘫  |1: virtual text:  |2: 7 |3: 8 |4: { "                         view: Unknown", "Comment" }

󰘫  |1: floating opt |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature425",
  focusable = true,
  line_to_cursor = "        path('about/',",
  max_width = 200,
  noautocmd = true,
  offset_x = 1,
  offset_y = 2,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}
 |3: {}
 |4: 2 |5: { "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)" }

󰘫  |1: extmark |2: 62 |3: 18 |4: 30 |5: 0 |6: MoreMsg
󰘫  |1: extmark |2: 62 |3: 17 |4: 30 |5: 0
󰘫  |1: extmark_id |2: 2
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: bufnr, ns |2: 62 |3: 45
󰘫  |1: closing winnr |2: 1019
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: {
  _fix_pos = true,
  always_trigger = false,
  bind = true,
  check_completion_visible = true,
  client_id = 1,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  signature_result = {
    activeParameter = 5,
    activeSignature = 0,
    cfgActiveSignature = 0,
    signatures = { {
        activeParameter = 1,
        label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
        parameters = { {
            label = { 1, 15 }
          }, {
            label = { 17, 30 }
          }, {
            label = { 32, 61 }
          }, {
            label = { 63, 90 }
          }, {
            label = { 92, 122 }
          } }
      } }
  },
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: {
  _fix_pos = true,
  always_trigger = false,
  bind = true,
  check_completion_visible = true,
  client_id = 1,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  signature_result = {
    activeParameter = 5,
    activeSignature = 0,
    cfgActiveSignature = 0,
    signatures = { {
        activeParameter = 1,
        label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
        parameters = { {
            label = { 1, 15 }
          }, {
            label = { 17, 30 }
          }, {
            label = { 32, 61 }
          }, {
            label = { 63, 90 }
          }, {
            label = { 92, 122 }
          } }
      } }
  },
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	[string ":lua"]:1: in main chunk
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: 
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 0
󰘫  |1: delta |2:  |3:  |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:257: in function 'handler'
	/usr/share/nvim/runtime/lua/vim/lsp.lua:1505: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2: 
󰘫  |1: newline, lets try signature based on setup
󰘫  |1: lsp cap:  |2: true |3: false |4: 0
󰘫  |1: delta |2:  |3:  |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:257: in function 'handler'
	/usr/share/nvim/runtime/lua/vim/lsp.lua:1505: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     return render(request,
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 26
󰘫  |1: delta |2:     return render(request, |3:     return render(request, |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 83,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 26,
      line = 23
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/views.py"
    }
  },
  version = 0
}
 |3: {
  activeParameter = 6,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 1,
      documentation = {
        kind = "markdown",
        value = "Return a HttpResponse whose content is filled with the result of calling\ndjango.template.loader.render\\_to\\_string() with the passed arguments."
      },
      label = "(request: Unknown, template_name: Unknown, context: Unknown | None = None, content_type: Unknown | None = None, status: Unknown | None = None, using: Unknown | None = None) -> HttpResponse",
      parameters = { {
          label = { 1, 17 }
        }, {
          label = { 19, 41 }
        }, {
          label = { 43, 73 }
        }, {
          label = { 75, 110 }
        }, {
          label = { 112, 141 }
        }, {
          label = { 143, 171 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "    return render(request,",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 1 |3: (request: Unknown, template_name: Unknown, context: Unknown | None = None, content_type: Unknown | None = None, status: Unknown | None = None, using: Unknown | None = None) -> HttpResponse
󰘫  |1: nextpara: |2: {
  label = { 19, 41 }
}

󰘫  |1: func |2: (request: Unknown, template_name: Unknown, context: Unknown | None = None, content_type: Unknown | None = None, status: Unknown | None = None, using: Unknown | None = None) -> HttpResponse |3: {
  label = { 19, 41 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('', views
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 16
󰘫  |1: delta |2: uest, |3:         path('', views |4:     return render(request, |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 16,
      line = 6
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 9
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 1,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "        path('',",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 1 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 17, 30 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 17, 30 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path('admin/'
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 9
󰘫  |1: delta |2:  views |3:     path('admin/' |4:         path('', views |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 57,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 9,
      line = 19
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/django_project/urls.py"
    }
  },
  version = 3
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 0,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "    path(",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 0 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 1, 15 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 1, 15 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path('blog/
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 9
󰘫  |1: delta |2:     path('blog/ |3:     path('blog/ |4:  |5: {}

󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 57,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 9,
      line = 20
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/django_project/urls.py"
    }
  },
  version = 3
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 0,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  check_completion_visible = true,
  line_to_cursor = "    path(",
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 0 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 1, 15 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 1, 15 }
}

󰘫  |1: md lines trim |2: { "```python", "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)", "```" }

󰘫  |1: label: |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: 0 |4: 1 |5: 5 |6: {
  activeParameter = 0,
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  parameters = { {
      label = { 1, 15 }
    }, {
      label = { 17, 30 }
    }, {
      label = { 32, 61 }
    }, {
      label = { 63, 90 }
    }, {
      label = { 92, 122 }
    } }
}

󰘫  |1: win config |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature287",
  line_to_cursor = "    path(",
  max_height = 50,
  max_width = 200,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}

󰘫  |1: cleanup vt |2: 14
󰘫  |1: virtual text:  |2: 20 |3: 21 |4: { "                route: Unknown", "Comment" }

󰘫  |1: floating opt |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature287",
  focusable = true,
  line_to_cursor = "    path(",
  max_width = 200,
  noautocmd = true,
  offset_x = 1,
  offset_y = 2,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}
 |3: {}
 |4: 2 |5: { "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)" }

󰘫  |1: sig_cfg new bufnr, winnr  |2: 84 |3: 1026
󰘫  |1: extmark |2: 84 |3: 2 |4: 15 |5: 0 |6: MoreMsg
󰘫  |1: extmark |2: 84 |3: 1 |4: 15 |5: 0
󰘫  |1: extmark_id |2: 1
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path('blog
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 9
󰘫  |1: delta |2: g/ |3:     path('blog |4:     path('blog/ |5: {}

󰘫  |1: mode:    |2: i
󰘫  |1: should not trigger
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: bufnr, ns |2: 84 |3: 45
󰘫  |1: closing winnr |2: 1026
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path('blo
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 9
󰘫  |1: delta |2:     path('blo |3:     path('blo |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 57,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 9,
      line = 20
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/django_project/urls.py"
    }
  },
  version = 5
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 0,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "    path(",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 0 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 1, 15 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 1, 15 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path('blog
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 9
󰘫  |1: delta |2:     path('blog |3:     path('blog |4:  |5: {}

󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 57,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 9,
      line = 20
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/django_project/urls.py"
    }
  },
  version = 5
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 0,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  check_completion_visible = true,
  line_to_cursor = "    path(",
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 0 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 1, 15 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 1, 15 }
}

󰘫  |1: md lines trim |2: { "```python", "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)", "```" }

󰘫  |1: label: |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: 0 |4: 1 |5: 5 |6: {
  activeParameter = 0,
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  parameters = { {
      label = { 1, 15 }
    }, {
      label = { 17, 30 }
    }, {
      label = { 32, 61 }
    }, {
      label = { 63, 90 }
    }, {
      label = { 92, 122 }
    } }
}

󰘫  |1: win config |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature846",
  line_to_cursor = "    path(",
  max_height = 50,
  max_width = 200,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}

󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path('blo
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 9
󰘫  |1: delta |2: og |3:     path('blo |4:     path('blog |5: {}

󰘫  |1: cleanup vt |2: 14
󰘫  |1: virtual text:  |2: 20 |3: 21 |4: { "              route: Unknown", "Comment" }

󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 57,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 9,
      line = 20
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/django_project/urls.py"
    }
  },
  version = 7
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 0,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  check_completion_visible = true,
  line_to_cursor = "    path(",
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 0 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 1, 15 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 1, 15 }
}

󰘫  |1: md lines trim |2: { "```python", "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)", "```" }

󰘫  |1: label: |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: 0 |4: 1 |5: 5 |6: {
  activeParameter = 0,
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  parameters = { {
      label = { 1, 15 }
    }, {
      label = { 17, 30 }
    }, {
      label = { 32, 61 }
    }, {
      label = { 63, 90 }
    }, {
      label = { 92, 122 }
    } }
}

󰘫  |1: win config |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature327",
  line_to_cursor = "    path(",
  max_height = 50,
  max_width = 200,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}

󰘫  |1: cleanup vt |2: 14
󰘫  |1: virtual text:  |2: 20 |3: 20 |4: { "  route: Unknown", "Comment" }

󰘫  |1: floating opt |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature327",
  focusable = true,
  line_to_cursor = "    path(",
  max_width = 200,
  noautocmd = true,
  offset_x = 1,
  offset_y = 2,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}
 |3: {}
 |4: 2 |5: { "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)" }

󰘫  |1: sig_cfg new bufnr, winnr  |2: 86 |3: 1028
󰘫  |1: extmark |2: 86 |3: 2 |4: 15 |5: 0 |6: MoreMsg
󰘫  |1: extmark |2: 86 |3: 1 |4: 15 |5: 0
󰘫  |1: extmark_id |2: 1
󰘫  |1: floating opt |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature846",
  focusable = true,
  line_to_cursor = "    path(",
  max_width = 200,
  noautocmd = true,
  offset_x = 1,
  offset_y = 2,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}
 |3: {}
 |4: 2 |5: { "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)" }

󰘫  |1: extmark |2: 86 |3: 2 |4: 15 |5: 0 |6: MoreMsg
󰘫  |1: extmark |2: 86 |3: 1 |4: 15 |5: 0
󰘫  |1: extmark_id |2: 2
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path('
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 9
󰘫  |1: delta |2: 'blo |3:     path(' |4:     path('blo |5: {}

󰘫  |1: mode:    |2: i
󰘫  |1: should not trigger
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: lsp cap:  |2: true |3: false |4: 8
󰘫  |1: delta |2: h(' |3:     path |4:     path(' |5: {}

󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path('
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 9
󰘫  |1: delta |2: h(' |3:     path(' |4:     path |5: {}

󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 57,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 9,
      line = 20
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/django_project/urls.py"
    }
  },
  version = 14
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 0,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  check_completion_visible = true,
  line_to_cursor = "    path(",
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 0 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 1, 15 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 1, 15 }
}

󰘫  |1: md lines trim |2: { "```python", "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)", "```" }

󰘫  |1: label: |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: 0 |4: 1 |5: 5 |6: {
  activeParameter = 0,
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  parameters = { {
      label = { 1, 15 }
    }, {
      label = { 17, 30 }
    }, {
      label = { 32, 61 }
    }, {
      label = { 63, 90 }
    }, {
      label = { 92, 122 }
    } }
}

󰘫  |1: win config |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature981",
  line_to_cursor = "    path(",
  max_height = 50,
  max_width = 200,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}

󰘫  |1: cleanup vt |2: 14
󰘫  |1: virtual text:  |2: 20 |3: 21 |4: { "           route: Unknown", "Comment" }

󰘫  |1: floating opt |2: {
  border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
  check_completion_visible = true,
  close_events = { "BufHidden" },
  focus_id = "lsp_signature981",
  focusable = true,
  line_to_cursor = "    path(",
  max_width = 200,
  noautocmd = true,
  offset_x = 1,
  offset_y = 2,
  stylize_markdown = true,
  trigger_from_lsp_sig = true,
  triggered_chars = { "(", ",", ")" },
  wrap = true,
  wrap_at = 200,
  zindex = 200
}
 |3: {}
 |4: 2 |5: { "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)" }

󰘫  |1: sig_cfg new bufnr, winnr  |2: 87 |3: 1029
󰘫  |1: extmark |2: 87 |3: 2 |4: 15 |5: 0 |6: MoreMsg
󰘫  |1: extmark |2: 87 |3: 1 |4: 15 |5: 0
󰘫  |1: extmark_id |2: 1
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: bufnr, ns |2: 87 |3: 45
󰘫  |1: closing winnr |2: 1029
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path(
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 9
󰘫  |1: delta |2:     path( |3:     path( |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 57,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 9,
      line = 20
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/django_project/urls.py"
    }
  },
  version = 14
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 0,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "    path(",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 0 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 1, 15 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 1, 15 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path('', include('blog.urls'))o
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: )
󰘫  |1: lsp cap:  |2: true |3: true |4: 35
󰘫  |1: delta |2:     path('', include('blog.urls'))o |3:     path('', include('blog.urls'))o |4:  |5: {}

󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:257: in function 'handler'
	/usr/share/nvim/runtime/lua/vim/lsp.lua:1505: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: i
󰘫  |1: cleanup vt |2: 14
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path('', include('blog.urls'))ob
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: )
󰘫  |1: lsp cap:  |2: true |3: true |4: 36
󰘫  |1: delta |2: ob |3:     path('', include('blog.urls'))ob |4:     path('', include('blog.urls'))o |5: {}

󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:257: in function 'handler'
	/usr/share/nvim/runtime/lua/vim/lsp.lua:1505: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: i
󰘫  |1: cleanup vt |2: 14
󰘫  |1: changed
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:     path('', include('blog.urls'))ob1
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: )
󰘫  |1: lsp cap:  |2: true |3: true |4: 37
󰘫  |1: delta |2: b1 |3:     path('', include('blog.urls'))ob1 |4:     path('', include('blog.urls'))ob |5: {}

󰘫  |1: signature handler
󰘫  |1: no valid signatures
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:257: in function 'handler'
	/usr/share/nvim/runtime/lua/vim/lsp.lua:1505: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: i
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('', views
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: ,
󰘫  |1: lsp cap:  |2: true |3: true |4: 16
󰘫  |1: delta |2:         path('', views |3:         path('', views |4:  |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 16,
      line = 6
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 9
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 1,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "        path('',",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 1 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 17, 30 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 17, 30 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 13
󰘫  |1: delta |2: '', views |3:         path(' |4:         path('', views |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 13,
      line = 7
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 9
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 0,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "        path(",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 0 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 1, 15 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 1, 15 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: {
  triggerCharacters = { "(", ",", ")" },
  workDoneProgress = true
}
 |2:         path('
󰘫  |1: ( |2: true
󰘫  |1: (
󰘫  |1: , |2: false
󰘫  |1: not special |2: ,
󰘫  |1: ) |2: true
󰘫  |1: )
󰘫  |1: [%(,%)][^%(,%)%)]*$ |2: %(,%) |3: ^%(,%)%)
󰘫  |1: last trigger char |2: (
󰘫  |1: lsp cap:  |2: true |3: true |4: 13
󰘫  |1: delta |2:         path(' |3:         path(' |4:         path(' |5: {
  trigger = "CursorHold"
}

󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: signature handler
󰘫  |1: sig result |2: {
  bufnr = 1,
  client_id = 1,
  method = "textDocument/signatureHelp",
  params = {
    position = {
      character = 13,
      line = 6
    },
    textDocument = {
      uri = "file:///home/jsmith49/projects/PyProjects/django_project/blog/urls.py"
    }
  },
  version = 9
}
 |3: {
  activeParameter = 5,
  activeSignature = 0,
  cfgActiveSignature = 0,
  signatures = { {
      activeParameter = 0,
      label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
      parameters = { {
          label = { 1, 15 }
        }, {
          label = { 17, 30 }
        }, {
          label = { 32, 61 }
        }, {
          label = { 63, 90 }
        }, {
          label = { 92, 122 }
        } }
    } }
}
 |4: {
  border = "rounded",
  line_to_cursor = "        path(",
  trigger_from_cursor_hold = true,
  triggered_chars = { "(", ",", ")" }
}

󰘫  |1: sig actPar |2: 0 |3: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)
󰘫  |1: nextpara: |2: {
  label = { 1, 15 }
}

󰘫  |1: func |2: (route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern) |3: {
  label = { 1, 15 }
}

󰘫  |1: trigger from cursor hold, no need to update floating window
󰘫  |1: {
  _fix_pos = true,
  always_trigger = false,
  bind = true,
  check_completion_visible = true,
  client_id = 1,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  signature_result = {
    activeParameter = 5,
    activeSignature = 0,
    cfgActiveSignature = 0,
    signatures = { {
        activeParameter = 0,
        label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
        parameters = { {
            label = { 1, 15 }
          }, {
            label = { 17, 30 }
          }, {
            label = { 32, 61 }
          }, {
            label = { 63, 90 }
          }, {
            label = { 92, 122 }
          } }
      } }
  },
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: {
  _fix_pos = true,
  always_trigger = false,
  bind = true,
  check_completion_visible = true,
  client_id = 1,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  signature_result = {
    activeParameter = 5,
    activeSignature = 0,
    cfgActiveSignature = 0,
    signatures = { {
        activeParameter = 0,
        label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
        parameters = { {
            label = { 1, 15 }
          }, {
            label = { 17, 30 }
          }, {
            label = { 32, 61 }
          }, {
            label = { 63, 90 }
          }, {
            label = { 92, 122 }
          } }
      } }
  },
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: {
  _fix_pos = true,
  always_trigger = false,
  bind = true,
  check_completion_visible = true,
  client_id = 1,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  signature_result = {
    activeParameter = 5,
    activeSignature = 0,
    cfgActiveSignature = 0,
    signatures = { {
        activeParameter = 0,
        label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
        parameters = { {
            label = { 1, 15 }
          }, {
            label = { 17, 30 }
          }, {
            label = { 32, 61 }
          }, {
            label = { 63, 90 }
          }, {
            label = { 92, 122 }
          } }
      } }
  },
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	[string ":lua"]:1: in main chunk
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: {
  _fix_pos = true,
  always_trigger = false,
  bind = true,
  check_completion_visible = true,
  client_id = 1,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  signature_result = {
    activeParameter = 5,
    activeSignature = 0,
    cfgActiveSignature = 0,
    signatures = { {
        activeParameter = 0,
        label = "(route: Unknown, view: Unknown, kwargs: Unknown | None = None, name: Unknown | None = None, Pattern: Unknown | None = None) -> (URLResolver | URLPattern)",
        parameters = { {
            label = { 1, 15 }
          }, {
            label = { 17, 30 }
          }, {
            label = { 32, 61 }
          }, {
            label = { 63, 90 }
          }, {
            label = { 92, 122 }
          } }
      } }
  },
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: no active client
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: {
  always_trigger = false,
  bind = true,
  bufnr = 0,
  check_completion_visible = true,
  close_timeout = 4000,
  cursorhold_update = true,
  debug = true,
  doc_lines = 5,
  extra_trigger_chars = {},
  fix_pos = true,
  floating_window = true,
  floating_window_above_cur_line = false,
  floating_window_off_x = 1,
  floating_window_off_y = <function 1>,
  handler_opts = {
    border = "rounded"
  },
  hi_parameter = "MoreMsg",
  hint_enable = true,
  hint_inline = <function 2>,
  hint_prefix = "  ",
  hint_scheme = "Comment",
  log_path = "debug_log_file_path",
  mainwin = 0,
  max_height = 50,
  max_width = 200,
  padding = "",
  shadow_blend = 36,
  shadow_guibg = "Black",
  timer_interval = 100,
  use_lspsaga = false,
  verbose = false,
  wrap = true,
  zindex = 200
}

󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	[string ":lua"]:1: in main chunk
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: insert enter
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: changed
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: Insert leave cleanup
󰘫  |1: stack traceback:
	...er/start/lsp_signature.nvim/lua/lsp_signature/helper.lua:341: in function 'cleanup_async'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:813: in function 'on_InsertLeave'
	...cker/start/lsp_signature.nvim/lua/lsp_signature/init.lua:837: in function ''
	vim/_editor.lua: in function <vim/_editor.lua:0>
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: async cleanup:  |2: n
󰘫  |1: cleanup vt |2: 14
󰘫  |1: mode:    |2: n
󰘫  |1: close timer
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
󰘫  |1: hover not supported
󰘫  |1: lsp cap:  |2: false |3: false
󰘫  |1: skip: signature capabilities not enabled
󰘫  |1: Insert leave cleanup |2: n
